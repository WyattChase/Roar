// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String?    @unique
  role      UserRole   @default(USER)
  character Character?
  password  String
  Session   Session[]
}

model Session {
  id        Int       @id @default(autoincrement())
  authToken String    @unique
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Character {
  id                 String         @id @default(uuid())
  name               String         @unique
  user               User           @relation(fields: [userId], references: [id])
  userId             String         @unique
  village            Village
  rank               Rank           @default(STUDENT)
  offensiveNinjutsu  Int            @default(1)
  offensiveTaijutsu  Int            @default(1)
  offensiveGenjutsu  Int            @default(1)
  offensiveBukijutsu Int            @default(1)
  defensiveNinjutsu  Int            @default(1)
  defensiveTaijutsu  Int            @default(1)
  defensiveGenjutsu  Int            @default(1)
  defensiveBukijutsu Int            @default(1)
  speed              Int            @default(1)
  intelligence       Int            @default(1)
  strength           Int            @default(1)
  endurance          Int            @default(1)
  characterPool      CharacterPool?
  battlesInitiated   Battle[]       @relation("attacker_relation")
  battlesDefender    Battle[]       @relation("defender_relation")
  isInBattle         Boolean        @default(false)
}

model CharacterPool {
  characterId String    @id @unique
  character   Character @relation(fields: [characterId], references: [id])
  level       Int       @default(1)
  experience  Int       @default(0)
  health      Int       @default(100)
  maxHealth   Int       @default(100)
  chakra      Int       @default(100)
  maxChakra   Int       @default(100)
  stamina     Int       @default(100)
  maxStamina  Int       @default(100)
}

enum UserRole {
  USER
  MOD
  ADMIN
}

enum Village {
  LEAF
  STONE
  SAND
  CLOUD
  MIST
}

enum Rank {
  STUDENT
  GENIN
  CHUNIN
  JONIN
}

model AICharacter {
  id           String   @id @default(uuid())
  name         String
  health       Int      @default(100)
  ninjutsu     Int      @default(1)
  taijutsu     Int      @default(1)
  genjutsu     Int      @default(1)
  speed        Int      @default(1)
  intelligence Int      @default(1)
  strength     Int      @default(1)
  endurance    Int      @default(1)
  active       Boolean  @default(true)
  battle       Battle[]
}

model Battle {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  state          BattleState  @default(INITIALIZED)
  type           BattleType
  attackerId     String
  attacker       Character    @relation("attacker_relation", fields: [attackerId], references: [id])
  defenderId     String?
  userDefender   Character?   @relation("defender_relation", fields: [defenderId], references: [id])
  defenderAiName String?
  aiDefender     AICharacter? @relation(fields: [defenderAiName], references: [id])
}

enum BattleState {
  INITIALIZED
  WAITING_FOR_BOTH
  WAITING_FOR_ATTACKER
  WAITING_FOR_DEFENDER
  ACTIONS_DONE
  FINISHED
}

enum BattleType {
  AI
  PVP
}
